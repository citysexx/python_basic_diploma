from typing import List, AnyStr
from telebot import types
from src.bin import weather


def main() -> ['types.ReplyKeyboardMarkup']:
    """
    This is a function that calls a main menu.
    It returns a telebot markup object with buttons. All the markup
    functionality has been decided to take part in a separate file
    because some of them are used more than once
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    help_btn = types.KeyboardButton("‚ùìÔ∏è –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å?")
    owner_btn = types.KeyboardButton("üë®‚ÄçüíªÔ∏è –ì–¥–µ —Ç–≤–æ–π —Ö–æ–∑—è–∏–Ω, –∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?")
    cat_real_look_btn = types.KeyboardButton("üñºÔ∏è –ö–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?")

    markup.add(
        help_btn,
        owner_btn,
        cat_real_look_btn
    )

    return markup


def location() -> ['types.ReplyKeyboardMarkup']:
    """
    This function shows up a menu to user that asks for the location
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True
    )

    location_btn = types.KeyboardButton(
        text="üìçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π",
        request_location=True
    )

    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(location_btn, main_menu_btn)

    return markup


def weather_main() -> ['types.ReplyKeyboardMarkup']:
    """
    This function opens a menu where the user is offered to choose for when
    he wants to get a forecast (for now or future)
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )
    current_weather_btn = types.KeyboardButton('‚ö°Ô∏è –ü–æ–≥–æ–¥–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å')
    forecast_weather_btn = types.KeyboardButton('‚åöÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    markup.add(
        current_weather_btn,
        forecast_weather_btn,
        main_menu_btn
    )

    return markup


def interactive_help() -> ['types.ReplyKeyboardMarkup']:
    """
    This set of buttons is called when user called help and received
    a list of commands. He can enter these commands, but for dumb people we
    usually need dumb and simple gui (buttons)
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )

    auto_location_btn = types.KeyboardButton('üß≠Ô∏è –ò—Å–∫–∞—Ç—å –ø–æ –º–æ–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é')
    manual_location_btn = types.KeyboardButton('üîçÔ∏è –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')
    # subscribe_btn
    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    markup.add(
        auto_location_btn,
        manual_location_btn,
        main_menu_btn
    )

    return markup


def confirm_city(from_results: List) -> ['types.ReplyKeyboardMarkup']:
    """
    This markup pops up in the manual search only. After all the variants are provided
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )

    for index, city_info in enumerate(from_results):
        pack = [
            item
            for item in
            [city_info["name"],
             city_info["region"],
             city_info["country"],
             str(city_info["lat"]) + ',' + str(city_info["lon"])]
            if item
        ]

        label = f'{index + 1}. {", ".join(pack)}'
        button = types.KeyboardButton(f'{label}\n')
        markup.add(button)

    no_city_btn = types.KeyboardButton('–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—É—Ç –Ω–µ—Ç')
    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(no_city_btn, main_menu_btn)

    return markup


def to_main_menu() -> ['types.ReplyKeyboardMarkup']:
    """
    This func consists of just a button to the main menu
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )
    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(main_menu_btn)

    return markup


def forecast_variants() -> ['types.ReplyKeyboardMarkup']:
    """
    This markup offers the user to choose the period of forecast
    """

    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )
    today_btn = types.KeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è')
    tomorrow_btn = types.KeyboardButton('–ù–∞ –∑–∞–≤—Ç—Ä–∞')
    three_days_btn = types.KeyboardButton('–ù–∞ —Ç—Ä–∏ –¥–Ω—è')
    main_menu_btn = types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    markup.add(
        today_btn,
        tomorrow_btn,
        three_days_btn,
        main_menu_btn
    )

    return markup


def if_wants_hourly_forecast(forecast_object: ['weather.ForecastWeather']) -> ['types.ReplyKeyboardMarkup']:
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )

    for daily_forecast in forecast_object.daily_forecasts:
        markup.add(types.KeyboardButton(f'–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {daily_forecast.date}'))

    markup.add(types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    return markup


def period_wants_hourly_forecast() -> ['types.ReplyKeyboardMarkup']:
    """
    This keyboard is activated when the user chooses for what period of time
    (night, morning, day, evening) he wants hourly forecast
    Returns:
        telebot markup
    """
    markup = types.ReplyKeyboardMarkup(
        is_persistent=False,
        one_time_keyboard=False,
        resize_keyboard=True,
        row_width=1
    )

    markup.add(types.KeyboardButton('–ù–∞ —É—Ç—Ä–æ (6-12 —á–∞—Å–æ–≤)'))
    markup.add(types.KeyboardButton('–ù–∞ –¥–µ–Ω—å (12-18 —á–∞—Å–æ–≤)'))
    markup.add(types.KeyboardButton('–ù–∞ –≤–µ—á–µ—Ä (18-24 —á–∞—Å–∞)'))
    markup.add(types.KeyboardButton('–ù–∞ –Ω–æ—á—å (0-6 —á–∞—Å–æ–≤)'))
    markup.add(types.KeyboardButton('üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    return markup


if __name__ == '__main__':
    raise UserWarning(f'Not designed as a launcher!!!')
