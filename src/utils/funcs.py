import re
import telebot
from typing import Dict, AnyStr, List
from swagger_client.rest import ApiException
from src.utils.regex import *
import src.bin.weather as weather
from telebot import types


def from_string(user_input: ['telebot.types.Message']) -> Dict[AnyStr, List]:
    """
    This function accepts the user's message from telegram and extracts keywords
    from them using regex. Then the function switches flags inside a dictionary
    and returns the set of actions the program must conduct

    Args:
        user_input: a telebot Message object that the user enters
    """
    string: AnyStr = user_input.text
    pattern = re.compile(re.compile(r'\b\w+\b'))
    keywords = re.findall(pattern, string)
    flags: Dict[AnyStr, List] = {'keywords': keywords,
                                 'said_hi': [re.findall(template, string) for template in hi_regex],
                                 'said_bye': [re.findall(template, string) for template in bye_regex],
                                 'said_thanks': [re.findall(template, string) for template in thanks_regex],
                                 'asked_help': [re.findall(template, string) for template in help_regex],
                                 'cursed': [re.findall(template, string) for template in curse_regex],
                                 'said_curr': [re.findall(template, string) for template in current_regex],
                                 'said_future': [re.findall(template, string) for template in future_regex],
                                 'said_cities': []}
    # TODO –í –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Å–ª–æ–≤–∞—Ä—è —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–ø–∏—Å–∫–∏, –Ω–æ —Ç–∞–º –µ—Å—Ç—å –µ—â–µ —Å–ø–∏—Å–∫–∏. –ò—Ö –Ω–∞–¥–æ —Ä–∞–∑–ª–æ–∂–∏—Ç—å. –ü–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–≥—É–ª—è—Ä–∫–æ–π,
    #  –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–π –≥–æ—Ä–æ–¥

    for word in keywords:

        try:
            city_responded = weather.current_weather(word)
        except ApiException:
            pass
        else:
            flags['said_cities'].append(city_responded.city)

    return flags


def interpret(message: ['types.Message']) -> AnyStr:
    """
    This function is needed for the program to understand the user's
    buttons press as corresponding commands
    """
    pure_str = message.text

    if pure_str == "‚ùìÔ∏è –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å?" or pure_str == '/help':
        return '/help'
    if pure_str == "üë®‚ÄçüíªÔ∏è –ì–¥–µ —Ç–≤–æ–π —Ö–æ–∑—è–∏–Ω, –∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?" or pure_str == '/authors':
        return '/authors'
    if pure_str == "üñºÔ∏è –ö–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?" or pure_str == '/real':
        return '/real'
    if pure_str == 'üëàÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or pure_str == '/main':
        return '/main'
    if pure_str == 'üëáÔ∏è –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É –º–µ–Ω—è —Ç—É—Ç?' or pure_str == '/autoloc':
        return '/autoloc'
    if pure_str == '‚ö°Ô∏è –ü–æ–≥–æ–¥–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å' or pure_str == '/now':
        return '/now'
